import sys
sys.setrecursionlimit(1000000)  # long type,32bit OS 4B,64bit OS 8B(1bit for sign)
import codecs


def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, x, y = egcd(b % a, a)
        return (g, y - (b // a) * x, x)

def mulinv(b, n):
    g, x, _ = egcd(b, n)
    if g == 1:
        return x % n

def decrypt(p, q, e, c):
    n = p*q
    phi = (p-1)*(q-1)
    gcd, a, b = egcd(e, phi)
    d = mulinv(e, phi)
    p = pow(c, d, n)
    return p


n1 = 0x

n2 = 0xBB33CC7FCC8ECAF3BF9ED95C583792E1EC6B80EE875EC2064DBCF07595C8344923BF536524D4E0A75574C7798C73B197DD2B1B42054B1E49CB45FBF04E6F114CF8A365C3DF3645524F778268038A3FA26802E9D1EDBFBB5EDFB5A0C375370D7F10F57DABBD4F771DAD3632F01B9BCE10489966EE882DAB17A33B786AA5F73165A54051300B1DF9280392A3EDE9D3FC9C4D8A6A06351F6EF3598E8DE2B39D3B19AF64A1716CD15826C3F24CB13DEB722C3A03EF1D2BE2D0A5A6E210FF5D018367BE3BF99EA26BA006E5164A4DD55AABCD449DE5CE1864825DC160E50D509EB0E6FE723EF182681EDDB94084B83EC9E2E943E87CB87509AB0FD9B1CA22C1CEAFF39FCACF6729FC0E0578670D87D7F0F9CCBE09CB3E12CEB895572A9979D10BFDBFAFA260568D8DB184BE12B3E3193E07729CE3C1D9CD8283ED6983A06388036A0A70294F23392944778280E7DE9F60163A8150E30FF4A4EA02792CBE8305BAA2E99AFE51E17DAFC56BE0D384147BCD38E9D12934EC712622217773A4B3851A9B0C6C7C3E01F6111A1E1A557F4E2AE4A247CE9B75CCCCB1819825F3054AA1C055BD3E2340093AE2EF1D0FA5A176825EFDF79507027F5104080009142F0D43E2F10CFAD220813BBB9014D4F4325EDAC538FB5E82B753E2AD3B24607D7380AA64FCB98B59EA8B5A736B809383248CECE0B17255EA559E90127F778AF6D7E8A66DAD91

e = 65537

p = egcd(n1, n2)[0]
q1 = n1//p
q2 = n2//p

print(p*q1==n1)
print(p*q2==n2)

print("p =", str(p))
print("q1 =", str(q1))
print("q2 =", str(q2))

f = open("cipher", "rb")
c = int(f.read().hex(), 16)
f.close()

pt1 = decrypt(p, q1, e, c)
pt2 = decrypt(p, q2, e, c)

print(pt1.to_bytes((pt1.bit_length()+7)//8, byteorder='little'))
print(pt1.to_bytes((pt1.bit_length()+7)//8, byteorder='big'))
print(pt2.to_bytes((pt2.bit_length()+7)//8, byteorder='little'))
print(pt2.to_bytes((pt2.bit_length()+7)//8, byteorder='big'))
